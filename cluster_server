#!/usr/bin/env perl

use Getopt::Long;
use IO::Socket::INET;
use Net::Telnet;
use Ham::Reference::QRZ;
use Data::Dumper;
use strict;
use warnings;

my $arrl_section;
my $bio;
my $bio_file;
my $callsign;
my $client_address;
my $client_socket;
my $cluster_data;
my $cluster_report;
my $dxcc;
my $key;
my $listing;
my $local_host;
my $local_login;
my $local_port;
my $local_telnet;
my $qrz;
my $qrz_data;
my $qrz_cc;
my $qrz_state;
my $qrz_password;
my $qrz_username;
my $remarks;
my $returned;
my $session;
my $socket;
my $spot;
my $spot_data;
my $spot_datum;
my $value;

$Data::Dumper::Sortkeys = 1;

# auto-flush on socket
$| = 1;
 
$qrz_username = "wa5wni";
$qrz_password = "ChDa0123";

$qrz = Ham::Reference::QRZ->new(
  username => $qrz_username,
  password => $qrz_password
);

$local_login       = 'k5lrk-4';

$local_host = 'localhost';
$local_port = 6600;
$local_telnet  = new Net::Telnet ( Timeout => 30,
                                   telnetmode => 0,
                                   Errmode => 'return',
                                   Input_log => "local_data.log",
                                   Port => 6600
                                 );
$local_telnet->open ( $local_host );
$local_telnet->waitfor ( '/ogin:/i' );
$local_telnet->print ( $local_login ); 
local_flush ( );

# Creating a listening socket
   $socket = new IO::Socket::INET (
    LocalHost => '0.0.0.0',
    LocalPort => '7777',
    Proto => 'tcp',
    Listen => 5,
    Reuse => 1
);
die "Cannot create socket $!\n" unless $socket;

$SIG{INT} = sub { $socket->close(); exit 0; };

while(1)
{
    $client_socket = $socket->accept();

    # Get information about a newly connected client
    $client_address = $client_socket->peerhost();

    # Read up to 1024 characters from the connected client
    $spot = "";
    $client_socket->recv($spot, 1024);
    
    #printf "spot: %s\n", $spot;
    @$spot_data = split /:/, $spot, 5;
    #print "spot_data:\n";
    #print Dumper $spot_data;

    for $spot_datum ( @$spot_data )
    {
      ( $key, $value ) = split /=/, $spot_datum, 2;
      $cluster_data -> { $key } = $value;
      #printf "key: %-20s  value: %s\n", $key, $value;
    }

    $qrz_data = get_qrz_data ( $cluster_data -> { spot_callsign } );
    $qrz_cc = $qrz_data -> { dxcc } -> { cc };
    if ( $qrz_data -> { listing } -> { state } )
    {
      $qrz_state = $qrz_data -> { listing } -> { 'state' };
    }
    else
    {
      $qrz_state = "";
    }
    $remarks = $cluster_data -> { spot_remarks };

    $cluster_data -> { spot_remarks } = sprintf "%s: %s/%s %s %s", $cluster_data -> { cluster_identifier },
                                                                   $qrz_cc, $qrz_state,
                                                                   $cluster_data -> { spotter_callsign },
                                                                   $remarks;

    $cluster_report = sprintf "DX %s %s %s\n",
                              $cluster_data -> { spot_frequency },
                              $cluster_data -> { spot_callsign },
                              $cluster_data -> { spot_remarks };
#    #print Dumper $qrz_data;
#
    local_flush ( );
    printf "cluster_report: %s", $cluster_report;
    $local_telnet -> print ( $cluster_report );
}
#
sub local_flush
{
    $returned = $local_telnet -> get ( Timeout => 0 );
}

sub trim
{
    my $s = shift;
    $s =~ s/^\s+|\s+$//g;
    return $s
}

########################################################################

sub get_qrz_data
{
  my $callsign = shift;

  my $qrz_data;

  # $callsign = "wa5wni";

$qrz -> set_callsign ( $callsign );
 
# get the listing, bio and other information
#$listing      = $qrz -> get_listing;
#$bio          = $qrz -> get_bio;
#$bio_file     = $qrz -> get_bio_file;
#$dxcc         = $qrz -> get_dxcc;
#$session      = $qrz -> get_session;
#$arrl_section = $qrz -> get_arrl_section;
 
  $qrz_data -> { listing }      = $qrz -> get_listing ;
  $qrz_data -> { bio }          = $qrz -> get_bio ;
  $qrz_data -> { bio_file }     = $qrz -> get_bio_file ;
  $qrz_data -> { dxcc }         = $qrz -> get_dxcc ;
  $qrz_data -> { session }      = $qrz -> get_session ;
  $qrz_data -> { arrl_section } = $qrz -> get_arrl_section ;

  return ( $qrz_data );
}

#Dumper listing:
#$VAR1 = {
#          'addr1' => 'LAVALLEJA MINAS',
#          'addr2' => 'VILLA SERRANA',
#          'call' => 'CX7SS',
#          'ccode' => '270',
#          'class' => 'AV',
#          'country' => 'Uruguay',
#          'cqzone' => '13',
#          'dxcc' => '144',
#          'email' => 'cx7ss@hotmail.com',
#          'eqsl' => '1',
#          'fname' => 'E. EUGENIO',
#          'grid' => 'GF25lq',
#          'ituzone' => '14',
#          'land' => 'Uruguay',
#          'lat' => '-34.313333',
#          'locref' => '3',
#          'lon' => '-55.043333',
#          'lotw' => '1',
#          'moddate' => '2021-08-10 15:40:38',
#          'mqsl' => '1',
#          'name' => 'DE MARINO',
#          'qslmgr' => 'QSL VIA LOTW -E.QSL-QRZ,COM',
#          'u_views' => '128741',
#          'user' => 'CX7SS',
#          'zip' => '30000'
#        };
#
#
#Dumper bio
#$VAR1 = undef;
#
#
#Dumper bio_file
#$VAR1 = undef;
#
#
#Dumper dxcc
#$VAR1 = {
#          'cc' => 'UY',
#          'ccc' => 'URY',
#          'continent' => 'SA',
#          'cqzone' => '13',
#          'dxcc' => '144',
#          'ituzone' => '14',
#          'lat' => '-33.119150',
#          'lon' => '-56.140137',
#          'name' => 'Uruguay',
#          'timezone' => '-3'
#        };
#
#
#Dumper session
#$VAR1 = {
#          'Count' => '3263',
#          'GMTime' => 'Mon May 27 19:31:11 2024',
#          'Key' => 'dbca4cd50de560c48ab3265b07baba17',
#          'Remark' => 'cpu: 0.019s',
#          'SubExp' => 'Wed Jan 15 02:01:03 2025'
#        };
#
#
#Dumper arrl_section
#$VAR1 = undef;
#
#
#$VAR1 = {
#          'spot_callsign' => 'CX7SS',
#          'spot_cluster_identifier' => 'WA9PIE-2',
#          'spot_frequency' => '21248.0',
#          'spot_remarks' => 'PLS LISTEN TO OD5OJ'
#        };
#$VAR1 = !!1;
